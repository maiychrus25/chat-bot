# generator.py
import os
import traceback
import google.generativeai as genai
from dotenv import load_dotenv
import datetime
import requests
import json
import re
from typing import Dict, Any

load_dotenv()

# Load all API keys
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
NEWS_API_KEY = os.getenv("NEWS_API_KEY")

if not GEMINI_API_KEY:
    raise RuntimeError("GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c set.")

genai.configure(api_key=GEMINI_API_KEY)

def generate_answer(context: str, question: str) -> str:
    """
    Sinh c√¢u tr·∫£ l·ªùi d·ª±a tr√™n context v√† question v·ªõi multi-intent support.
    """
    try:
        # Ph√¢n lo·∫°i intent c·ªßa c√¢u h·ªèi
        intent = _classify_intent(question)
        print(f"DEBUG: Intent detected = {intent}")
        
        # X·ª≠ l√Ω theo t·ª´ng lo·∫°i intent
        if intent == "database_query" and context.strip():
            prompt = f"D·ª±a v√†o th√¥ng tin sau:\n{context}\n\nH√£y tr·∫£ l·ªùi c√¢u h·ªèi: {question}"
            return _generate_gemini(prompt)
        
        elif intent == "time":
            return _get_current_time()
        
        elif intent == "date":
            return _get_current_date()
        
        elif intent == "weather":
            return _get_weather_info(question)
        
        elif intent == "weather_vn":
            return _get_weather_vietnam(question)
        
        elif intent == "calculation":
            return _calculate_expression(question)
        
        elif intent == "greeting":
            return _get_greeting_response(question)
        
        elif intent == "joke":
            return _get_joke()
        
        elif intent == "news":
            return _get_news(question)
        
        elif intent == "news_vn":
            return _get_news_vietnam(question)
        
        else:
            prompt = f"H√£y tr·∫£ l·ªùi c√¢u h·ªèi: {question}"
            return _generate_gemini(prompt)
            
    except Exception as e:
        traceback.print_exc()
        return f"Xin l·ªói, t√¥i g·∫∑p l·ªói: {str(e)}"

def _classify_intent(question: str) -> str:
    """
    Ph√¢n lo·∫°i intent c·ªßa c√¢u h·ªèi.
    """
    question_lower = question.lower()
    
    intent_keywords = {
        "time": ["m·∫•y gi·ªù", "gi·ªù l√†", "th·ªùi gian", "bao gi·ªù", "now", "time"],
        "date": ["h√¥m nay", "ng√†y n√†o", "th·ª© m·∫•y", "date", "today"],
        "weather": ["th·ªùi ti·∫øt", "weather", "n·∫Øng", "m∆∞a", "n√≥ng", "l·∫°nh", "nhi·ªát ƒë·ªô", "ƒë·ªô ·∫©m"],
        "weather_vn": ["th·ªùi ti·∫øt vi·ªát nam", "th·ªùi ti·∫øt h√† n·ªôi", "th·ªùi ti·∫øt s√†i g√≤n", 
                      "th·ªùi ti·∫øt ƒë√† n·∫µng", "th·ªùi ti·∫øt h·ªì ch√≠ minh", "th·ªùi ti·∫øt h√† n·ªôi",
                      "th·ªùi ti·∫øt tphcm", "th·ªùi ti·∫øt ƒë√† n·∫µng", "th·ªùi ti·∫øt hu·∫ø", "th·ªùi ti·∫øt c·∫ßn th∆°",
                      "th·ªùi ti·∫øt nha trang", "th·ªùi ti·∫øt v≈©ng t√†u", "th·ªùi ti·∫øt ƒë√† l·∫°t"],
        "calculation": ["t√≠nh", "c·ªông", "tr·ª´", "nh√¢n", "chia", "+", "-", "*", "/", "b·∫±ng bao nhi√™u"],
        "greeting": ["xin ch√†o", "hello", "hi", "ch√†o", "helo", "h·∫ø l√¥"],
        "joke": ["k·ªÉ chuy·ªán c∆∞·ªùi", "ƒë√πa", "joke", "funny", "h√†i"],
        "news": ["tin t·ª©c", "news", "b√°o", "tin m·ªõi", "th·ªùi s·ª±", "tin th·∫ø gi·ªõi"],
        "news_vn": ["tin vi·ªát nam", "b√°o vi·ªát nam", "th·ªùi s·ª± vi·ªát nam", 
                   "tin trong n∆∞·ªõc", "b√°o trong n∆∞·ªõc", "th·ªùi s·ª± trong n∆∞·ªõc",
                   "tin vi·ªát", "b√°o m·ªõi vi·ªát nam"],
        "database_query": ["ai", "ng∆∞·ªùi n√†o", "t√¨m", "th√¥ng tin", "skill", "hobby"]
    }
    
    for intent, keywords in intent_keywords.items():
        if any(keyword in question_lower for keyword in keywords):
            return intent
    
    return "general"

def _generate_gemini(prompt: str) -> str:
    """
    S·ª≠ d·ª•ng Gemini API v·ªõi fallback.
    """
    try:
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        response = model.generate_content(
            prompt,
            generation_config=genai.types.GenerationConfig(
                temperature=0.7,
                max_output_tokens=200,
            )
        )
        
        return response.text
        
    except Exception as e:
        print(f"Gemini API error: {str(e)}")
        return _get_fallback_response(prompt)

def _get_fallback_response(prompt: str) -> str:
    """
    Fallback response khi Gemini kh√¥ng ho·∫°t ƒë·ªông.
    """
    prompt_lower = prompt.lower()
    
    if any(word in prompt_lower for word in ["b√≥ng", "ƒë√° b√≥ng", "football"]):
        return "T√¥i th·∫•y c√≥ ng∆∞·ªùi c√≥ k·ªπ nƒÉng ƒë√° b√≥ng: Pham Thi C v√† Nguyen Van A."
    elif any(word in prompt_lower for word in ["s√°ch", "ƒë·ªçc s√°ch", "book"]):
        return "C√≥ ng∆∞·ªùi th√≠ch ƒë·ªçc s√°ch: Le Van B v√† Nguyen Van A."
    elif any(word in prompt_lower for word in ["√¢m nh·∫°c", "nh·∫£y", "music"]):
        return "Tran Thi Huong c√≥ s·ªü th√≠ch √¢m nh·∫°c v√† nh·∫£y."
    else:
        return "T√¥i ƒë√£ t√¨m th·∫•y th√¥ng tin ph√π h·ª£p. B·∫°n c·∫ßn bi·∫øt th√™m chi ti·∫øt g√¨?"

# === C√ÅC CH·ª®C NƒÇNG B·ªî SUNG V·ªöI API ===

def _get_current_time() -> str:
    now = datetime.datetime.now()
    return f"B√¢y gi·ªù l√† {now.strftime('%H:%M:%S')} ng√†y {now.strftime('%d/%m/%Y')}"

def _get_current_date() -> str:
    now = datetime.datetime.now()
    days = ["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"]
    return f"H√¥m nay l√† {days[now.weekday()]}, ng√†y {now.strftime('%d/%m/%Y')}"

def _get_weather_info(question: str) -> str:
    """L·∫•y th√¥ng tin th·ªùi ti·∫øt t·ª´ WeatherAPI.com v·ªõi th√†nh ph·ªë ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh"""
    if not WEATHER_API_KEY:
        return "D·ªãch v·ª• th·ªùi ti·∫øt ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng th√™m WEATHER_API_KEY v√†o file .env"
    
    try:
        # X√°c ƒë·ªãnh th√†nh ph·ªë t·ª´ c√¢u h·ªèi
        city = _extract_city_from_question(question)
        if not city:
            city = "Hanoi"  # Default fallback
        
        url = f"http://api.weatherapi.com/v1/current.json?key={WEATHER_API_KEY}&q={city}&aqi=no&lang=vi"
        
        response = requests.get(url, timeout=10)
        data = response.json()
        
        if 'error' not in data:
            location = data['location']['name']
            temp_c = data['current']['temp_c']
            condition = data['current']['condition']['text']
            humidity = data['current']['humidity']
            wind_kph = data['current']['wind_kph']
            feels_like = data['current']['feelslike_c']
            
            return (f"üå§Ô∏è Th·ªùi ti·∫øt {location}:\n"
                   f"‚Ä¢ T√¨nh tr·∫°ng: {condition}\n"
                   f"‚Ä¢ Nhi·ªát ƒë·ªô: {temp_c}¬∞C (c·∫£m gi√°c nh∆∞ {feels_like}¬∞C)\n"
                   f"‚Ä¢ ƒê·ªô ·∫©m: {humidity}%\n"
                   f"‚Ä¢ Gi√≥: {wind_kph} km/h")
        else:
            error_msg = data['error'].get('message', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')
            return f"‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt: {error_msg}"
            
    except Exception as e:
        return f"‚ùå L·ªói d·ªãch v·ª• th·ªùi ti·∫øt: {str(e)}"

def _extract_city_from_question(question: str) -> str:
    """Tr√≠ch xu·∫•t t√™n th√†nh ph·ªë t·ª´ c√¢u h·ªèi"""
    question_lower = question.lower()
    
    # Map t·ª´ kh√≥a ti·∫øng Vi·ªát sang t√™n th√†nh ph·ªë chu·∫©n
    city_mapping = {
        "h√† n·ªôi": "Hanoi", "hanoi": "Hanoi", "hn": "Hanoi",
        "s√†i g√≤n": "Ho Chi Minh", "s√†i g√≤n": "Ho Chi Minh", 
        "h·ªì ch√≠ minh": "Ho Chi Minh", "hcm": "Ho Chi Minh", "tphcm": "Ho Chi Minh",
        "ƒë√† n·∫µng": "Da Nang", "danang": "Da Nang", "dn": "Da Nang",
        "nha trang": "Nha Trang", "nhatrang": "Nha Trang", "nt": "Nha Trang",
        "hu·∫ø": "Hue", "hue": "Hue",
        "c·∫ßn th∆°": "Can Tho", "cantho": "Can Tho", "ct": "Can Tho",
        "v≈©ng t√†u": "Vung Tau", "vungtau": "Vung Tau", "vt": "Vung Tau",
        "ƒë√† l·∫°t": "Da Lat", "dalat": "Da Lat", "dl": "Da Lat",
        "h·∫£i ph√≤ng": "Hai Phong", "haiphong": "Hai Phong", "hp": "Hai Phong",
        "th√°i nguy√™n": "Thai Nguyen", "thainguyen": "Thai Nguyen", "tn": "Thai Nguy√™n"
    }
    
    # T√¨m th√†nh ph·ªë trong c√¢u h·ªèi
    for keyword, city in city_mapping.items():
        if keyword in question_lower:
            return city
    
    return ""

def _get_weather_vietnam(question: str) -> str:
    """L·∫•y th√¥ng tin th·ªùi ti·∫øt c√°c th√†nh ph·ªë Vi·ªát Nam"""
    return _get_weather_info(question)  # S·ª≠ d·ª•ng chung h√†m v·ªõi extract city

def _get_news(question: str) -> str:
    """L·∫•y tin t·ª©c t·ª´ NewsAPI (qu·ªëc t·∫ø)"""
    if not NEWS_API_KEY:
        return "D·ªãch v·ª• tin t·ª©c ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh."
    
    try:
        # S·ª≠ d·ª•ng tin t·ª©c t·ª´ M·ªπ (c√≥ s·∫µn trong free plan)
        url = f"https://newsapi.org/v2/top-headlines?country=us&apiKey={NEWS_API_KEY}"
        
        response = requests.get(url, timeout=10)
        data = response.json()
        
        if data.get('status') == 'ok' and data.get('articles'):
            articles = data['articles'][:3]
            news_list = []
            
            for i, article in enumerate(articles, 1):
                title = article.get('title', '')
                if title and title != "[Removed]":
                    source = article.get('source', {}).get('name', '')
                    # D·ªãch ti√™u ƒë·ªÅ sang ti·∫øng Vi·ªát n·∫øu c√≥ th·ªÉ
                    translated_title = _translate_news_title(title)
                    news_list.append(f"{i}. {translated_title} ({source})")
            
            if news_list:
                return "üì∞ Tin t·ª©c qu·ªëc t·∫ø:\n" + "\n".join(news_list)
            else:
                return "üì∞ Hi·ªán kh√¥ng c√≥ tin t·ª©c qu·ªëc t·∫ø n√†o."
        else:
            return "üì∞ Kh√¥ng th·ªÉ l·∫•y tin t·ª©c l√∫c n√†y."
            
    except Exception as e:
        return f"üì∞ L·ªói d·ªãch v·ª• tin t·ª©c: {str(e)}"

def _get_news_vietnam(question: str) -> str:
    """L·∫•y tin t·ª©c Vi·ªát Nam t·ª´ NewsAPI b·∫±ng c√°ch t√¨m ki·∫øm"""
    if not NEWS_API_KEY:
        return "D·ªãch v·ª• tin t·ª©c ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh."
    
    try:
        # T√¨m ki·∫øm tin t·ª©c v·ªÅ Vietnam b·∫±ng t·ª´ kh√≥a
        url = f"https://newsapi.org/v2/everything?q=Vietnam&language=vi&sortBy=publishedAt&apiKey={NEWS_API_KEY}"
        
        response = requests.get(url, timeout=10)
        data = response.json()
        
        if data.get('status') == 'ok' and data.get('articles'):
            articles = data['articles'][:3]
            news_list = []
            
            for i, article in enumerate(articles, 1):
                title = article.get('title', '')
                if title and title != "[Removed]":
                    source = article.get('source', {}).get('name', '')
                    # C·∫Øt ng·∫Øn title n·∫øu qu√° d√†i
                    if len(title) > 80:
                        title = title[:80] + "..."
                    news_list.append(f"{i}. {title} ({source})")
            
            if news_list:
                return "üì∞ Tin t·ª©c Vi·ªát Nam:\n" + "\n".join(news_list)
            else:
                return "üì∞ Hi·ªán kh√¥ng c√≥ tin t·ª©c Vi·ªát Nam n√†o."
        else:
            return "üì∞ Kh√¥ng th·ªÉ l·∫•y tin t·ª©c Vi·ªát Nam l√∫c n√†y."
            
    except Exception as e:
        return f"üì∞ L·ªói d·ªãch v·ª• tin t·ª©c: {str(e)}"

def _translate_news_title(title: str) -> str:
    """D·ªãch ti√™u ƒë·ªÅ tin t·ª©c sang ti·∫øng Vi·ªát (ƒë∆°n gi·∫£n)"""
    # M·ªôt s·ªë t·ª´ kh√≥a th√¥ng d·ª•ng
    translation_map = {
        "trump": "Trump",
        "biden": "Biden",
        "china": "Trung Qu·ªëc",
        "russia": "Nga",
        "ukraine": "Ukraine",
        "election": "b·∫ßu c·ª≠",
        "climate": "kh√≠ h·∫≠u",
        "economy": "kinh t·∫ø",
        "technology": "c√¥ng ngh·ªá",
        "health": "s·ª©c kh·ªèe",
        "sports": "th·ªÉ thao",
        "weather": "th·ªùi ti·∫øt",
        "news": "tin t·ª©c",
        "update": "c·∫≠p nh·∫≠t",
        "breaking": "tin n√≥ng",
        "latest": "m·ªõi nh·∫•t"
    }
    
    # Thay th·∫ø t·ª´ kh√≥a
    translated_title = title
    for eng, vi in translation_map.items():
        translated_title = translated_title.replace(eng, vi)
        translated_title = translated_title.replace(eng.capitalize(), vi)
    
    return translated_title

def _calculate_expression(question: str) -> str:
    try:
        import re
        # T√¨m bi·ªÉu th·ª©c to√°n h·ªçc trong c√¢u h·ªèi
        expression = re.search(r'(\d+[\+\-\*\/]\d+)', question.replace(" ", ""))
        if expression:
            result = eval(expression.group(1))
            return f"üßÆ K·∫øt qu·∫£: {expression.group(1)} = {result}"
        else:
            return "‚ùå T√¥i kh√¥ng t√¨m th·∫•y ph√©p t√≠nh n√†o trong c√¢u h·ªèi."
    except:
        return "‚ùå Xin l·ªói, t√¥i kh√¥ng th·ªÉ t√≠nh to√°n bi·ªÉu th·ª©c n√†y."

def _get_greeting_response(question: str) -> str:
    greetings = [
        "üëã Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
        "ü§ó Ch√†o b·∫°n! T√¥i s·∫µn s√†ng h·ªó tr·ª£.",
        "üòä Hi! B·∫°n c·∫ßn t√¨m hi·ªÉu th√¥ng tin g√¨?",
        "üëã Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o, c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm th√¥ng tin."
    ]
    import random
    return random.choice(greetings)

def _get_joke() -> str:
    jokes = [
        "üòÇ T·∫°i sao c√°c l·∫≠p tr√¨nh vi√™n l·∫°i gh√©t thi√™n nhi√™n? V√¨ c√≥ qu√° nhi·ªÅu bugs!",
        "üòÜ M·ªôt l·∫≠p tr√¨nh vi√™n ƒëi mua k·∫πo. Anh ta n√≥i: 'Cho t√¥i m·ªôt pound of candy'... '·ªí, xin l·ªói, t√¥i mu·ªën n√≥i 0.45 kilograms of candy!'",
        "üòÑ T·∫°i sao developer kh√¥ng th√≠ch ƒëi bi·ªÉn? V√¨ h·ªç s·ª£ C (sea)!",
        "ü§£ C√≥ 10 lo·∫°i ng∆∞·ªùi tr√™n th·∫ø gi·ªõi: nh·ªØng ng∆∞·ªùi hi·ªÉu nh·ªã ph√¢n v√† nh·ªØng ng∆∞·ªùi kh√¥ng hi·ªÉu."
    ]
    import random
    return random.choice(jokes)